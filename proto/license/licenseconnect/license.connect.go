// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: license/license.proto

package licenseconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	license "menkyo_go/proto/license"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LicenseReaderName is the fully-qualified name of the LicenseReader service.
	LicenseReaderName = "license.LicenseReader"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LicenseReaderPushLicenseDataProcedure is the fully-qualified name of the LicenseReader's
	// PushLicenseData RPC.
	LicenseReaderPushLicenseDataProcedure = "/license.LicenseReader/PushLicenseData"
	// LicenseReaderPushReadLogProcedure is the fully-qualified name of the LicenseReader's PushReadLog
	// RPC.
	LicenseReaderPushReadLogProcedure = "/license.LicenseReader/PushReadLog"
	// LicenseReaderGetLogsProcedure is the fully-qualified name of the LicenseReader's GetLogs RPC.
	LicenseReaderGetLogsProcedure = "/license.LicenseReader/GetLogs"
	// LicenseReaderGetReadHistoryProcedure is the fully-qualified name of the LicenseReader's
	// GetReadHistory RPC.
	LicenseReaderGetReadHistoryProcedure = "/license.LicenseReader/GetReadHistory"
)

// LicenseReaderClient is a client for the license.LicenseReader service.
type LicenseReaderClient interface {
	// 読み取った免許証データをプッシュ
	PushLicenseData(context.Context, *connect.Request[license.LicenseData]) (*connect.Response[license.PushResponse], error)
	// 読み取りログをプッシュ
	PushReadLog(context.Context, *connect.Request[license.ReadLog]) (*connect.Response[license.PushResponse], error)
	// ログ一覧を取得
	GetLogs(context.Context, *connect.Request[license.GetLogsRequest]) (*connect.Response[license.GetLogsResponse], error)
	// 読み取り履歴を取得
	GetReadHistory(context.Context, *connect.Request[license.GetReadHistoryRequest]) (*connect.Response[license.GetReadHistoryResponse], error)
}

// NewLicenseReaderClient constructs a client for the license.LicenseReader service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLicenseReaderClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LicenseReaderClient {
	baseURL = strings.TrimRight(baseURL, "/")
	licenseReaderMethods := license.File_license_license_proto.Services().ByName("LicenseReader").Methods()
	return &licenseReaderClient{
		pushLicenseData: connect.NewClient[license.LicenseData, license.PushResponse](
			httpClient,
			baseURL+LicenseReaderPushLicenseDataProcedure,
			connect.WithSchema(licenseReaderMethods.ByName("PushLicenseData")),
			connect.WithClientOptions(opts...),
		),
		pushReadLog: connect.NewClient[license.ReadLog, license.PushResponse](
			httpClient,
			baseURL+LicenseReaderPushReadLogProcedure,
			connect.WithSchema(licenseReaderMethods.ByName("PushReadLog")),
			connect.WithClientOptions(opts...),
		),
		getLogs: connect.NewClient[license.GetLogsRequest, license.GetLogsResponse](
			httpClient,
			baseURL+LicenseReaderGetLogsProcedure,
			connect.WithSchema(licenseReaderMethods.ByName("GetLogs")),
			connect.WithClientOptions(opts...),
		),
		getReadHistory: connect.NewClient[license.GetReadHistoryRequest, license.GetReadHistoryResponse](
			httpClient,
			baseURL+LicenseReaderGetReadHistoryProcedure,
			connect.WithSchema(licenseReaderMethods.ByName("GetReadHistory")),
			connect.WithClientOptions(opts...),
		),
	}
}

// licenseReaderClient implements LicenseReaderClient.
type licenseReaderClient struct {
	pushLicenseData *connect.Client[license.LicenseData, license.PushResponse]
	pushReadLog     *connect.Client[license.ReadLog, license.PushResponse]
	getLogs         *connect.Client[license.GetLogsRequest, license.GetLogsResponse]
	getReadHistory  *connect.Client[license.GetReadHistoryRequest, license.GetReadHistoryResponse]
}

// PushLicenseData calls license.LicenseReader.PushLicenseData.
func (c *licenseReaderClient) PushLicenseData(ctx context.Context, req *connect.Request[license.LicenseData]) (*connect.Response[license.PushResponse], error) {
	return c.pushLicenseData.CallUnary(ctx, req)
}

// PushReadLog calls license.LicenseReader.PushReadLog.
func (c *licenseReaderClient) PushReadLog(ctx context.Context, req *connect.Request[license.ReadLog]) (*connect.Response[license.PushResponse], error) {
	return c.pushReadLog.CallUnary(ctx, req)
}

// GetLogs calls license.LicenseReader.GetLogs.
func (c *licenseReaderClient) GetLogs(ctx context.Context, req *connect.Request[license.GetLogsRequest]) (*connect.Response[license.GetLogsResponse], error) {
	return c.getLogs.CallUnary(ctx, req)
}

// GetReadHistory calls license.LicenseReader.GetReadHistory.
func (c *licenseReaderClient) GetReadHistory(ctx context.Context, req *connect.Request[license.GetReadHistoryRequest]) (*connect.Response[license.GetReadHistoryResponse], error) {
	return c.getReadHistory.CallUnary(ctx, req)
}

// LicenseReaderHandler is an implementation of the license.LicenseReader service.
type LicenseReaderHandler interface {
	// 読み取った免許証データをプッシュ
	PushLicenseData(context.Context, *connect.Request[license.LicenseData]) (*connect.Response[license.PushResponse], error)
	// 読み取りログをプッシュ
	PushReadLog(context.Context, *connect.Request[license.ReadLog]) (*connect.Response[license.PushResponse], error)
	// ログ一覧を取得
	GetLogs(context.Context, *connect.Request[license.GetLogsRequest]) (*connect.Response[license.GetLogsResponse], error)
	// 読み取り履歴を取得
	GetReadHistory(context.Context, *connect.Request[license.GetReadHistoryRequest]) (*connect.Response[license.GetReadHistoryResponse], error)
}

// NewLicenseReaderHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLicenseReaderHandler(svc LicenseReaderHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	licenseReaderMethods := license.File_license_license_proto.Services().ByName("LicenseReader").Methods()
	licenseReaderPushLicenseDataHandler := connect.NewUnaryHandler(
		LicenseReaderPushLicenseDataProcedure,
		svc.PushLicenseData,
		connect.WithSchema(licenseReaderMethods.ByName("PushLicenseData")),
		connect.WithHandlerOptions(opts...),
	)
	licenseReaderPushReadLogHandler := connect.NewUnaryHandler(
		LicenseReaderPushReadLogProcedure,
		svc.PushReadLog,
		connect.WithSchema(licenseReaderMethods.ByName("PushReadLog")),
		connect.WithHandlerOptions(opts...),
	)
	licenseReaderGetLogsHandler := connect.NewUnaryHandler(
		LicenseReaderGetLogsProcedure,
		svc.GetLogs,
		connect.WithSchema(licenseReaderMethods.ByName("GetLogs")),
		connect.WithHandlerOptions(opts...),
	)
	licenseReaderGetReadHistoryHandler := connect.NewUnaryHandler(
		LicenseReaderGetReadHistoryProcedure,
		svc.GetReadHistory,
		connect.WithSchema(licenseReaderMethods.ByName("GetReadHistory")),
		connect.WithHandlerOptions(opts...),
	)
	return "/license.LicenseReader/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LicenseReaderPushLicenseDataProcedure:
			licenseReaderPushLicenseDataHandler.ServeHTTP(w, r)
		case LicenseReaderPushReadLogProcedure:
			licenseReaderPushReadLogHandler.ServeHTTP(w, r)
		case LicenseReaderGetLogsProcedure:
			licenseReaderGetLogsHandler.ServeHTTP(w, r)
		case LicenseReaderGetReadHistoryProcedure:
			licenseReaderGetReadHistoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLicenseReaderHandler returns CodeUnimplemented from all methods.
type UnimplementedLicenseReaderHandler struct{}

func (UnimplementedLicenseReaderHandler) PushLicenseData(context.Context, *connect.Request[license.LicenseData]) (*connect.Response[license.PushResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("license.LicenseReader.PushLicenseData is not implemented"))
}

func (UnimplementedLicenseReaderHandler) PushReadLog(context.Context, *connect.Request[license.ReadLog]) (*connect.Response[license.PushResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("license.LicenseReader.PushReadLog is not implemented"))
}

func (UnimplementedLicenseReaderHandler) GetLogs(context.Context, *connect.Request[license.GetLogsRequest]) (*connect.Response[license.GetLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("license.LicenseReader.GetLogs is not implemented"))
}

func (UnimplementedLicenseReaderHandler) GetReadHistory(context.Context, *connect.Request[license.GetReadHistoryRequest]) (*connect.Response[license.GetReadHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("license.LicenseReader.GetReadHistory is not implemented"))
}
