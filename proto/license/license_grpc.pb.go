// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: license/license.proto

package license

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LicenseReader_PushLicenseData_FullMethodName = "/license.LicenseReader/PushLicenseData"
	LicenseReader_PushReadLog_FullMethodName     = "/license.LicenseReader/PushReadLog"
	LicenseReader_GetLogs_FullMethodName         = "/license.LicenseReader/GetLogs"
	LicenseReader_GetReadHistory_FullMethodName  = "/license.LicenseReader/GetReadHistory"
)

// LicenseReaderClient is the client API for LicenseReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 免許証読み取りサービス
type LicenseReaderClient interface {
	// 読み取った免許証データをプッシュ
	PushLicenseData(ctx context.Context, in *LicenseData, opts ...grpc.CallOption) (*PushResponse, error)
	// 読み取りログをプッシュ
	PushReadLog(ctx context.Context, in *ReadLog, opts ...grpc.CallOption) (*PushResponse, error)
	// ログ一覧を取得
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)
	// 読み取り履歴を取得
	GetReadHistory(ctx context.Context, in *GetReadHistoryRequest, opts ...grpc.CallOption) (*GetReadHistoryResponse, error)
}

type licenseReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewLicenseReaderClient(cc grpc.ClientConnInterface) LicenseReaderClient {
	return &licenseReaderClient{cc}
}

func (c *licenseReaderClient) PushLicenseData(ctx context.Context, in *LicenseData, opts ...grpc.CallOption) (*PushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, LicenseReader_PushLicenseData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseReaderClient) PushReadLog(ctx context.Context, in *ReadLog, opts ...grpc.CallOption) (*PushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, LicenseReader_PushReadLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseReaderClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, LicenseReader_GetLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseReaderClient) GetReadHistory(ctx context.Context, in *GetReadHistoryRequest, opts ...grpc.CallOption) (*GetReadHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReadHistoryResponse)
	err := c.cc.Invoke(ctx, LicenseReader_GetReadHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicenseReaderServer is the server API for LicenseReader service.
// All implementations must embed UnimplementedLicenseReaderServer
// for forward compatibility.
//
// 免許証読み取りサービス
type LicenseReaderServer interface {
	// 読み取った免許証データをプッシュ
	PushLicenseData(context.Context, *LicenseData) (*PushResponse, error)
	// 読み取りログをプッシュ
	PushReadLog(context.Context, *ReadLog) (*PushResponse, error)
	// ログ一覧を取得
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error)
	// 読み取り履歴を取得
	GetReadHistory(context.Context, *GetReadHistoryRequest) (*GetReadHistoryResponse, error)
	mustEmbedUnimplementedLicenseReaderServer()
}

// UnimplementedLicenseReaderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLicenseReaderServer struct{}

func (UnimplementedLicenseReaderServer) PushLicenseData(context.Context, *LicenseData) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushLicenseData not implemented")
}
func (UnimplementedLicenseReaderServer) PushReadLog(context.Context, *ReadLog) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushReadLog not implemented")
}
func (UnimplementedLicenseReaderServer) GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedLicenseReaderServer) GetReadHistory(context.Context, *GetReadHistoryRequest) (*GetReadHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadHistory not implemented")
}
func (UnimplementedLicenseReaderServer) mustEmbedUnimplementedLicenseReaderServer() {}
func (UnimplementedLicenseReaderServer) testEmbeddedByValue()                       {}

// UnsafeLicenseReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LicenseReaderServer will
// result in compilation errors.
type UnsafeLicenseReaderServer interface {
	mustEmbedUnimplementedLicenseReaderServer()
}

func RegisterLicenseReaderServer(s grpc.ServiceRegistrar, srv LicenseReaderServer) {
	// If the following call pancis, it indicates UnimplementedLicenseReaderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LicenseReader_ServiceDesc, srv)
}

func _LicenseReader_PushLicenseData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseReaderServer).PushLicenseData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LicenseReader_PushLicenseData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseReaderServer).PushLicenseData(ctx, req.(*LicenseData))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseReader_PushReadLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseReaderServer).PushReadLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LicenseReader_PushReadLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseReaderServer).PushReadLog(ctx, req.(*ReadLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseReader_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseReaderServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LicenseReader_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseReaderServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseReader_GetReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseReaderServer).GetReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LicenseReader_GetReadHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseReaderServer).GetReadHistory(ctx, req.(*GetReadHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LicenseReader_ServiceDesc is the grpc.ServiceDesc for LicenseReader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LicenseReader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "license.LicenseReader",
	HandlerType: (*LicenseReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushLicenseData",
			Handler:    _LicenseReader_PushLicenseData_Handler,
		},
		{
			MethodName: "PushReadLog",
			Handler:    _LicenseReader_PushReadLog_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _LicenseReader_GetLogs_Handler,
		},
		{
			MethodName: "GetReadHistory",
			Handler:    _LicenseReader_GetReadHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "license/license.proto",
}
