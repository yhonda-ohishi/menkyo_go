// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: proto/license.proto

package license

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 免許証データ
type LicenseData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CardId        string                 `protobuf:"bytes,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`                        // カードID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                          // 氏名
	NameKana      string                 `protobuf:"bytes,3,opt,name=name_kana,json=nameKana,proto3" json:"name_kana,omitempty"`                  // 氏名（カナ）
	BirthDate     string                 `protobuf:"bytes,4,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`               // 生年月日 (YYYY-MM-DD)
	Address       string                 `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`                                    // 住所
	IssueDate     string                 `protobuf:"bytes,6,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`               // 交付日 (YYYY-MM-DD)
	ExpiryDate    string                 `protobuf:"bytes,7,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`            // 有効期限 (YYYY-MM-DD)
	LicenseNumber string                 `protobuf:"bytes,8,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"`   // 免許証番号
	LicenseType   string                 `protobuf:"bytes,9,opt,name=license_type,json=licenseType,proto3" json:"license_type,omitempty"`         // 免許種別
	Photo         []byte                 `protobuf:"bytes,10,opt,name=photo,proto3" json:"photo,omitempty"`                                       // 顔写真データ
	ReadTimestamp int64                  `protobuf:"varint,11,opt,name=read_timestamp,json=readTimestamp,proto3" json:"read_timestamp,omitempty"` // 読み取りタイムスタンプ (Unix時刻)
	ReaderId      string                 `protobuf:"bytes,12,opt,name=reader_id,json=readerId,proto3" json:"reader_id,omitempty"`                 // リーダーID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LicenseData) Reset() {
	*x = LicenseData{}
	mi := &file_proto_license_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseData) ProtoMessage() {}

func (x *LicenseData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_license_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseData.ProtoReflect.Descriptor instead.
func (*LicenseData) Descriptor() ([]byte, []int) {
	return file_proto_license_proto_rawDescGZIP(), []int{0}
}

func (x *LicenseData) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *LicenseData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LicenseData) GetNameKana() string {
	if x != nil {
		return x.NameKana
	}
	return ""
}

func (x *LicenseData) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *LicenseData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LicenseData) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *LicenseData) GetExpiryDate() string {
	if x != nil {
		return x.ExpiryDate
	}
	return ""
}

func (x *LicenseData) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *LicenseData) GetLicenseType() string {
	if x != nil {
		return x.LicenseType
	}
	return ""
}

func (x *LicenseData) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *LicenseData) GetReadTimestamp() int64 {
	if x != nil {
		return x.ReadTimestamp
	}
	return 0
}

func (x *LicenseData) GetReaderId() string {
	if x != nil {
		return x.ReaderId
	}
	return ""
}

// 読み取りログ
type ReadLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                          // タイムスタンプ
	ReaderId      string                 `protobuf:"bytes,2,opt,name=reader_id,json=readerId,proto3" json:"reader_id,omitempty"`             // リーダーID
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                 // ステータス (success/error)
	ErrorMessage  string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // エラーメッセージ（エラー時）
	CardId        string                 `protobuf:"bytes,5,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`                   // カードID（成功時）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadLog) Reset() {
	*x = ReadLog{}
	mi := &file_proto_license_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadLog) ProtoMessage() {}

func (x *ReadLog) ProtoReflect() protoreflect.Message {
	mi := &file_proto_license_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadLog.ProtoReflect.Descriptor instead.
func (*ReadLog) Descriptor() ([]byte, []int) {
	return file_proto_license_proto_rawDescGZIP(), []int{1}
}

func (x *ReadLog) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ReadLog) GetReaderId() string {
	if x != nil {
		return x.ReaderId
	}
	return ""
}

func (x *ReadLog) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReadLog) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ReadLog) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

// レスポンス
type PushResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestId     string                 `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // リクエストID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushResponse) Reset() {
	*x = PushResponse{}
	mi := &file_proto_license_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushResponse) ProtoMessage() {}

func (x *PushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_license_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushResponse.ProtoReflect.Descriptor instead.
func (*PushResponse) Descriptor() ([]byte, []int) {
	return file_proto_license_proto_rawDescGZIP(), []int{2}
}

func (x *PushResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PushResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PushResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

var File_proto_license_proto protoreflect.FileDescriptor

const file_proto_license_proto_rawDesc = "" +
	"\n" +
	"\x13proto/license.proto\x12\alicense\"\xf4\x02\n" +
	"\vLicenseData\x12\x17\n" +
	"\acard_id\x18\x01 \x01(\tR\x06cardId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1b\n" +
	"\tname_kana\x18\x03 \x01(\tR\bnameKana\x12\x1d\n" +
	"\n" +
	"birth_date\x18\x04 \x01(\tR\tbirthDate\x12\x18\n" +
	"\aaddress\x18\x05 \x01(\tR\aaddress\x12\x1d\n" +
	"\n" +
	"issue_date\x18\x06 \x01(\tR\tissueDate\x12\x1f\n" +
	"\vexpiry_date\x18\a \x01(\tR\n" +
	"expiryDate\x12%\n" +
	"\x0elicense_number\x18\b \x01(\tR\rlicenseNumber\x12!\n" +
	"\flicense_type\x18\t \x01(\tR\vlicenseType\x12\x14\n" +
	"\x05photo\x18\n" +
	" \x01(\fR\x05photo\x12%\n" +
	"\x0eread_timestamp\x18\v \x01(\x03R\rreadTimestamp\x12\x1b\n" +
	"\treader_id\x18\f \x01(\tR\breaderId\"\x9a\x01\n" +
	"\aReadLog\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\x12\x1b\n" +
	"\treader_id\x18\x02 \x01(\tR\breaderId\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\x12\x17\n" +
	"\acard_id\x18\x05 \x01(\tR\x06cardId\"a\n" +
	"\fPushResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"request_id\x18\x03 \x01(\tR\trequestId2\x87\x01\n" +
	"\rLicenseReader\x12>\n" +
	"\x0fPushLicenseData\x12\x14.license.LicenseData\x1a\x15.license.PushResponse\x126\n" +
	"\vPushReadLog\x12\x10.license.ReadLog\x1a\x15.license.PushResponseB\x19Z\x17menkyo_go/proto/licenseb\x06proto3"

var (
	file_proto_license_proto_rawDescOnce sync.Once
	file_proto_license_proto_rawDescData []byte
)

func file_proto_license_proto_rawDescGZIP() []byte {
	file_proto_license_proto_rawDescOnce.Do(func() {
		file_proto_license_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_license_proto_rawDesc), len(file_proto_license_proto_rawDesc)))
	})
	return file_proto_license_proto_rawDescData
}

var file_proto_license_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_license_proto_goTypes = []any{
	(*LicenseData)(nil),  // 0: license.LicenseData
	(*ReadLog)(nil),      // 1: license.ReadLog
	(*PushResponse)(nil), // 2: license.PushResponse
}
var file_proto_license_proto_depIdxs = []int32{
	0, // 0: license.LicenseReader.PushLicenseData:input_type -> license.LicenseData
	1, // 1: license.LicenseReader.PushReadLog:input_type -> license.ReadLog
	2, // 2: license.LicenseReader.PushLicenseData:output_type -> license.PushResponse
	2, // 3: license.LicenseReader.PushReadLog:output_type -> license.PushResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_license_proto_init() }
func file_proto_license_proto_init() {
	if File_proto_license_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_license_proto_rawDesc), len(file_proto_license_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_license_proto_goTypes,
		DependencyIndexes: file_proto_license_proto_depIdxs,
		MessageInfos:      file_proto_license_proto_msgTypes,
	}.Build()
	File_proto_license_proto = out.File
	file_proto_license_proto_goTypes = nil
	file_proto_license_proto_depIdxs = nil
}
