// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: auth/v1/auth.proto

package authv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_GetAuthorizationURL_FullMethodName      = "/auth.v1.AuthService/GetAuthorizationURL"
	AuthService_ExchangeCode_FullMethodName             = "/auth.v1.AuthService/ExchangeCode"
	AuthService_GetProfile_FullMethodName               = "/auth.v1.AuthService/GetProfile"
	AuthService_RefreshToken_FullMethodName             = "/auth.v1.AuthService/RefreshToken"
	AuthService_VerifyToken_FullMethodName              = "/auth.v1.AuthService/VerifyToken"
	AuthService_ListUsers_FullMethodName                = "/auth.v1.AuthService/ListUsers"
	AuthService_UpdateUserRoles_FullMethodName          = "/auth.v1.AuthService/UpdateUserRoles"
	AuthService_DeleteUser_FullMethodName               = "/auth.v1.AuthService/DeleteUser"
	AuthService_RestoreUser_FullMethodName              = "/auth.v1.AuthService/RestoreUser"
	AuthService_GetTimeCard_FullMethodName              = "/auth.v1.AuthService/GetTimeCard"
	AuthService_ListTimeCards_FullMethodName            = "/auth.v1.AuthService/ListTimeCards"
	AuthService_CreateTimeCard_FullMethodName           = "/auth.v1.AuthService/CreateTimeCard"
	AuthService_UpdateTimeCard_FullMethodName           = "/auth.v1.AuthService/UpdateTimeCard"
	AuthService_DeleteTimeCard_FullMethodName           = "/auth.v1.AuthService/DeleteTimeCard"
	AuthService_GetTimeCardLog_FullMethodName           = "/auth.v1.AuthService/GetTimeCardLog"
	AuthService_ListTimeCardLogs_FullMethodName         = "/auth.v1.AuthService/ListTimeCardLogs"
	AuthService_ListTimeCardLogsByCardID_FullMethodName = "/auth.v1.AuthService/ListTimeCardLogsByCardID"
	AuthService_CreateTimeCardLog_FullMethodName        = "/auth.v1.AuthService/CreateTimeCardLog"
	AuthService_UpdateTimeCardLog_FullMethodName        = "/auth.v1.AuthService/UpdateTimeCardLog"
	AuthService_DeleteTimeCardLog_FullMethodName        = "/auth.v1.AuthService/DeleteTimeCardLog"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AuthService handles WOFF (Works Office) authentication operations
type AuthServiceClient interface {
	// GetAuthorizationURL returns the WOFF OAuth authorization URL
	GetAuthorizationURL(ctx context.Context, in *GetAuthorizationURLRequest, opts ...grpc.CallOption) (*GetAuthorizationURLResponse, error)
	// ExchangeCode exchanges authorization code for access token
	ExchangeCode(ctx context.Context, in *ExchangeCodeRequest, opts ...grpc.CallOption) (*ExchangeCodeResponse, error)
	// GetProfile returns the authenticated user's profile (requires WOFF access token)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	// RefreshToken refreshes an existing WOFF access token
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// VerifyToken verifies a WOFF access token
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error)
	// ListUsers returns a list of all registered users (requires authentication)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// UpdateUserRoles updates roles for a user (requires admin role)
	UpdateUserRoles(ctx context.Context, in *UpdateUserRolesRequest, opts ...grpc.CallOption) (*UpdateUserRolesResponse, error)
	// DeleteUser soft deletes a user (requires admin role)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// RestoreUser restores a soft-deleted user (requires admin role)
	RestoreUser(ctx context.Context, in *RestoreUserRequest, opts ...grpc.CallOption) (*RestoreUserResponse, error)
	// GetTimeCard retrieves a timecard by composite key (datetime + id)
	GetTimeCard(ctx context.Context, in *GetTimeCardRequest, opts ...grpc.CallOption) (*TimeCardResponse, error)
	// ListTimeCards retrieves a list of timecards with optional pagination
	ListTimeCards(ctx context.Context, in *ListTimeCardsRequest, opts ...grpc.CallOption) (*ListTimeCardsResponse, error)
	// CreateTimeCard creates a new timecard (dev environment only)
	CreateTimeCard(ctx context.Context, in *CreateTimeCardRequest, opts ...grpc.CallOption) (*TimeCardResponse, error)
	// UpdateTimeCard updates an existing timecard (dev environment only)
	UpdateTimeCard(ctx context.Context, in *UpdateTimeCardRequest, opts ...grpc.CallOption) (*TimeCardResponse, error)
	// DeleteTimeCard deletes a timecard (dev environment only)
	DeleteTimeCard(ctx context.Context, in *DeleteTimeCardRequest, opts ...grpc.CallOption) (*DeleteTimeCardResponse, error)
	// GetTimeCardLog retrieves a timecard log by composite key (datetime + id)
	GetTimeCardLog(ctx context.Context, in *GetTimeCardLogRequest, opts ...grpc.CallOption) (*TimeCardLogResponse, error)
	// ListTimeCardLogs retrieves a list of timecard logs with optional pagination
	ListTimeCardLogs(ctx context.Context, in *ListTimeCardLogsRequest, opts ...grpc.CallOption) (*ListTimeCardLogsResponse, error)
	// ListTimeCardLogsByCardID retrieves timecard logs by card_id with pagination
	ListTimeCardLogsByCardID(ctx context.Context, in *ListTimeCardLogsByCardIDRequest, opts ...grpc.CallOption) (*ListTimeCardLogsResponse, error)
	// CreateTimeCardLog creates a new timecard log (dev environment only)
	CreateTimeCardLog(ctx context.Context, in *CreateTimeCardLogRequest, opts ...grpc.CallOption) (*TimeCardLogResponse, error)
	// UpdateTimeCardLog updates an existing timecard log (dev environment only)
	UpdateTimeCardLog(ctx context.Context, in *UpdateTimeCardLogRequest, opts ...grpc.CallOption) (*TimeCardLogResponse, error)
	// DeleteTimeCardLog deletes a timecard log (dev environment only)
	DeleteTimeCardLog(ctx context.Context, in *DeleteTimeCardLogRequest, opts ...grpc.CallOption) (*DeleteTimeCardLogResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) GetAuthorizationURL(ctx context.Context, in *GetAuthorizationURLRequest, opts ...grpc.CallOption) (*GetAuthorizationURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthorizationURLResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAuthorizationURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExchangeCode(ctx context.Context, in *ExchangeCodeRequest, opts ...grpc.CallOption) (*ExchangeCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExchangeCodeResponse)
	err := c.cc.Invoke(ctx, AuthService_ExchangeCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, AuthService_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_VerifyToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, AuthService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateUserRoles(ctx context.Context, in *UpdateUserRolesRequest, opts ...grpc.CallOption) (*UpdateUserRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserRolesResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateUserRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RestoreUser(ctx context.Context, in *RestoreUserRequest, opts ...grpc.CallOption) (*RestoreUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoreUserResponse)
	err := c.cc.Invoke(ctx, AuthService_RestoreUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetTimeCard(ctx context.Context, in *GetTimeCardRequest, opts ...grpc.CallOption) (*TimeCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeCardResponse)
	err := c.cc.Invoke(ctx, AuthService_GetTimeCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListTimeCards(ctx context.Context, in *ListTimeCardsRequest, opts ...grpc.CallOption) (*ListTimeCardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTimeCardsResponse)
	err := c.cc.Invoke(ctx, AuthService_ListTimeCards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateTimeCard(ctx context.Context, in *CreateTimeCardRequest, opts ...grpc.CallOption) (*TimeCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeCardResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateTimeCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateTimeCard(ctx context.Context, in *UpdateTimeCardRequest, opts ...grpc.CallOption) (*TimeCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeCardResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateTimeCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteTimeCard(ctx context.Context, in *DeleteTimeCardRequest, opts ...grpc.CallOption) (*DeleteTimeCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTimeCardResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteTimeCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetTimeCardLog(ctx context.Context, in *GetTimeCardLogRequest, opts ...grpc.CallOption) (*TimeCardLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeCardLogResponse)
	err := c.cc.Invoke(ctx, AuthService_GetTimeCardLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListTimeCardLogs(ctx context.Context, in *ListTimeCardLogsRequest, opts ...grpc.CallOption) (*ListTimeCardLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTimeCardLogsResponse)
	err := c.cc.Invoke(ctx, AuthService_ListTimeCardLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListTimeCardLogsByCardID(ctx context.Context, in *ListTimeCardLogsByCardIDRequest, opts ...grpc.CallOption) (*ListTimeCardLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTimeCardLogsResponse)
	err := c.cc.Invoke(ctx, AuthService_ListTimeCardLogsByCardID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateTimeCardLog(ctx context.Context, in *CreateTimeCardLogRequest, opts ...grpc.CallOption) (*TimeCardLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeCardLogResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateTimeCardLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateTimeCardLog(ctx context.Context, in *UpdateTimeCardLogRequest, opts ...grpc.CallOption) (*TimeCardLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeCardLogResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateTimeCardLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteTimeCardLog(ctx context.Context, in *DeleteTimeCardLogRequest, opts ...grpc.CallOption) (*DeleteTimeCardLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTimeCardLogResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteTimeCardLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
//
// AuthService handles WOFF (Works Office) authentication operations
type AuthServiceServer interface {
	// GetAuthorizationURL returns the WOFF OAuth authorization URL
	GetAuthorizationURL(context.Context, *GetAuthorizationURLRequest) (*GetAuthorizationURLResponse, error)
	// ExchangeCode exchanges authorization code for access token
	ExchangeCode(context.Context, *ExchangeCodeRequest) (*ExchangeCodeResponse, error)
	// GetProfile returns the authenticated user's profile (requires WOFF access token)
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	// RefreshToken refreshes an existing WOFF access token
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// VerifyToken verifies a WOFF access token
	VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error)
	// ListUsers returns a list of all registered users (requires authentication)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// UpdateUserRoles updates roles for a user (requires admin role)
	UpdateUserRoles(context.Context, *UpdateUserRolesRequest) (*UpdateUserRolesResponse, error)
	// DeleteUser soft deletes a user (requires admin role)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// RestoreUser restores a soft-deleted user (requires admin role)
	RestoreUser(context.Context, *RestoreUserRequest) (*RestoreUserResponse, error)
	// GetTimeCard retrieves a timecard by composite key (datetime + id)
	GetTimeCard(context.Context, *GetTimeCardRequest) (*TimeCardResponse, error)
	// ListTimeCards retrieves a list of timecards with optional pagination
	ListTimeCards(context.Context, *ListTimeCardsRequest) (*ListTimeCardsResponse, error)
	// CreateTimeCard creates a new timecard (dev environment only)
	CreateTimeCard(context.Context, *CreateTimeCardRequest) (*TimeCardResponse, error)
	// UpdateTimeCard updates an existing timecard (dev environment only)
	UpdateTimeCard(context.Context, *UpdateTimeCardRequest) (*TimeCardResponse, error)
	// DeleteTimeCard deletes a timecard (dev environment only)
	DeleteTimeCard(context.Context, *DeleteTimeCardRequest) (*DeleteTimeCardResponse, error)
	// GetTimeCardLog retrieves a timecard log by composite key (datetime + id)
	GetTimeCardLog(context.Context, *GetTimeCardLogRequest) (*TimeCardLogResponse, error)
	// ListTimeCardLogs retrieves a list of timecard logs with optional pagination
	ListTimeCardLogs(context.Context, *ListTimeCardLogsRequest) (*ListTimeCardLogsResponse, error)
	// ListTimeCardLogsByCardID retrieves timecard logs by card_id with pagination
	ListTimeCardLogsByCardID(context.Context, *ListTimeCardLogsByCardIDRequest) (*ListTimeCardLogsResponse, error)
	// CreateTimeCardLog creates a new timecard log (dev environment only)
	CreateTimeCardLog(context.Context, *CreateTimeCardLogRequest) (*TimeCardLogResponse, error)
	// UpdateTimeCardLog updates an existing timecard log (dev environment only)
	UpdateTimeCardLog(context.Context, *UpdateTimeCardLogRequest) (*TimeCardLogResponse, error)
	// DeleteTimeCardLog deletes a timecard log (dev environment only)
	DeleteTimeCardLog(context.Context, *DeleteTimeCardLogRequest) (*DeleteTimeCardLogResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) GetAuthorizationURL(context.Context, *GetAuthorizationURLRequest) (*GetAuthorizationURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizationURL not implemented")
}
func (UnimplementedAuthServiceServer) ExchangeCode(context.Context, *ExchangeCodeRequest) (*ExchangeCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCode not implemented")
}
func (UnimplementedAuthServiceServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedAuthServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServiceServer) VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedAuthServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedAuthServiceServer) UpdateUserRoles(context.Context, *UpdateUserRolesRequest) (*UpdateUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRoles not implemented")
}
func (UnimplementedAuthServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthServiceServer) RestoreUser(context.Context, *RestoreUserRequest) (*RestoreUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreUser not implemented")
}
func (UnimplementedAuthServiceServer) GetTimeCard(context.Context, *GetTimeCardRequest) (*TimeCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeCard not implemented")
}
func (UnimplementedAuthServiceServer) ListTimeCards(context.Context, *ListTimeCardsRequest) (*ListTimeCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTimeCards not implemented")
}
func (UnimplementedAuthServiceServer) CreateTimeCard(context.Context, *CreateTimeCardRequest) (*TimeCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTimeCard not implemented")
}
func (UnimplementedAuthServiceServer) UpdateTimeCard(context.Context, *UpdateTimeCardRequest) (*TimeCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTimeCard not implemented")
}
func (UnimplementedAuthServiceServer) DeleteTimeCard(context.Context, *DeleteTimeCardRequest) (*DeleteTimeCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTimeCard not implemented")
}
func (UnimplementedAuthServiceServer) GetTimeCardLog(context.Context, *GetTimeCardLogRequest) (*TimeCardLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeCardLog not implemented")
}
func (UnimplementedAuthServiceServer) ListTimeCardLogs(context.Context, *ListTimeCardLogsRequest) (*ListTimeCardLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTimeCardLogs not implemented")
}
func (UnimplementedAuthServiceServer) ListTimeCardLogsByCardID(context.Context, *ListTimeCardLogsByCardIDRequest) (*ListTimeCardLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTimeCardLogsByCardID not implemented")
}
func (UnimplementedAuthServiceServer) CreateTimeCardLog(context.Context, *CreateTimeCardLogRequest) (*TimeCardLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTimeCardLog not implemented")
}
func (UnimplementedAuthServiceServer) UpdateTimeCardLog(context.Context, *UpdateTimeCardLogRequest) (*TimeCardLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTimeCardLog not implemented")
}
func (UnimplementedAuthServiceServer) DeleteTimeCardLog(context.Context, *DeleteTimeCardLogRequest) (*DeleteTimeCardLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTimeCardLog not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_GetAuthorizationURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorizationURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAuthorizationURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAuthorizationURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAuthorizationURL(ctx, req.(*GetAuthorizationURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExchangeCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExchangeCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ExchangeCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExchangeCode(ctx, req.(*ExchangeCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_VerifyToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyToken(ctx, req.(*VerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateUserRoles(ctx, req.(*UpdateUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RestoreUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RestoreUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RestoreUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RestoreUser(ctx, req.(*RestoreUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetTimeCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetTimeCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetTimeCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetTimeCard(ctx, req.(*GetTimeCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListTimeCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTimeCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListTimeCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListTimeCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListTimeCards(ctx, req.(*ListTimeCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateTimeCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTimeCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateTimeCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateTimeCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateTimeCard(ctx, req.(*CreateTimeCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateTimeCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTimeCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateTimeCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateTimeCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateTimeCard(ctx, req.(*UpdateTimeCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteTimeCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTimeCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteTimeCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteTimeCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteTimeCard(ctx, req.(*DeleteTimeCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetTimeCardLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeCardLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetTimeCardLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetTimeCardLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetTimeCardLog(ctx, req.(*GetTimeCardLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListTimeCardLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTimeCardLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListTimeCardLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListTimeCardLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListTimeCardLogs(ctx, req.(*ListTimeCardLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListTimeCardLogsByCardID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTimeCardLogsByCardIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListTimeCardLogsByCardID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListTimeCardLogsByCardID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListTimeCardLogsByCardID(ctx, req.(*ListTimeCardLogsByCardIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateTimeCardLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTimeCardLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateTimeCardLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateTimeCardLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateTimeCardLog(ctx, req.(*CreateTimeCardLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateTimeCardLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTimeCardLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateTimeCardLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateTimeCardLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateTimeCardLog(ctx, req.(*UpdateTimeCardLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteTimeCardLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTimeCardLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteTimeCardLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteTimeCardLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteTimeCardLog(ctx, req.(*DeleteTimeCardLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.v1.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthorizationURL",
			Handler:    _AuthService_GetAuthorizationURL_Handler,
		},
		{
			MethodName: "ExchangeCode",
			Handler:    _AuthService_ExchangeCode_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _AuthService_GetProfile_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthService_RefreshToken_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _AuthService_VerifyToken_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _AuthService_ListUsers_Handler,
		},
		{
			MethodName: "UpdateUserRoles",
			Handler:    _AuthService_UpdateUserRoles_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthService_DeleteUser_Handler,
		},
		{
			MethodName: "RestoreUser",
			Handler:    _AuthService_RestoreUser_Handler,
		},
		{
			MethodName: "GetTimeCard",
			Handler:    _AuthService_GetTimeCard_Handler,
		},
		{
			MethodName: "ListTimeCards",
			Handler:    _AuthService_ListTimeCards_Handler,
		},
		{
			MethodName: "CreateTimeCard",
			Handler:    _AuthService_CreateTimeCard_Handler,
		},
		{
			MethodName: "UpdateTimeCard",
			Handler:    _AuthService_UpdateTimeCard_Handler,
		},
		{
			MethodName: "DeleteTimeCard",
			Handler:    _AuthService_DeleteTimeCard_Handler,
		},
		{
			MethodName: "GetTimeCardLog",
			Handler:    _AuthService_GetTimeCardLog_Handler,
		},
		{
			MethodName: "ListTimeCardLogs",
			Handler:    _AuthService_ListTimeCardLogs_Handler,
		},
		{
			MethodName: "ListTimeCardLogsByCardID",
			Handler:    _AuthService_ListTimeCardLogsByCardID_Handler,
		},
		{
			MethodName: "CreateTimeCardLog",
			Handler:    _AuthService_CreateTimeCardLog_Handler,
		},
		{
			MethodName: "UpdateTimeCardLog",
			Handler:    _AuthService_UpdateTimeCardLog_Handler,
		},
		{
			MethodName: "DeleteTimeCardLog",
			Handler:    _AuthService_DeleteTimeCardLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/v1/auth.proto",
}
