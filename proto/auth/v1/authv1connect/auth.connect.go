// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/auth.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "menkyo_go/proto/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceHeartbeatProcedure is the fully-qualified name of the AuthService's Heartbeat RPC.
	AuthServiceHeartbeatProcedure = "/auth.v1.AuthService/Heartbeat"
	// AuthServiceGetAuthorizationURLProcedure is the fully-qualified name of the AuthService's
	// GetAuthorizationURL RPC.
	AuthServiceGetAuthorizationURLProcedure = "/auth.v1.AuthService/GetAuthorizationURL"
	// AuthServiceExchangeCodeProcedure is the fully-qualified name of the AuthService's ExchangeCode
	// RPC.
	AuthServiceExchangeCodeProcedure = "/auth.v1.AuthService/ExchangeCode"
	// AuthServiceGetProfileProcedure is the fully-qualified name of the AuthService's GetProfile RPC.
	AuthServiceGetProfileProcedure = "/auth.v1.AuthService/GetProfile"
	// AuthServiceRefreshTokenProcedure is the fully-qualified name of the AuthService's RefreshToken
	// RPC.
	AuthServiceRefreshTokenProcedure = "/auth.v1.AuthService/RefreshToken"
	// AuthServiceVerifyTokenProcedure is the fully-qualified name of the AuthService's VerifyToken RPC.
	AuthServiceVerifyTokenProcedure = "/auth.v1.AuthService/VerifyToken"
	// AuthServiceListUsersProcedure is the fully-qualified name of the AuthService's ListUsers RPC.
	AuthServiceListUsersProcedure = "/auth.v1.AuthService/ListUsers"
	// AuthServiceUpdateUserRolesProcedure is the fully-qualified name of the AuthService's
	// UpdateUserRoles RPC.
	AuthServiceUpdateUserRolesProcedure = "/auth.v1.AuthService/UpdateUserRoles"
	// AuthServiceDeleteUserProcedure is the fully-qualified name of the AuthService's DeleteUser RPC.
	AuthServiceDeleteUserProcedure = "/auth.v1.AuthService/DeleteUser"
	// AuthServiceRestoreUserProcedure is the fully-qualified name of the AuthService's RestoreUser RPC.
	AuthServiceRestoreUserProcedure = "/auth.v1.AuthService/RestoreUser"
	// AuthServiceGetTimeCardProcedure is the fully-qualified name of the AuthService's GetTimeCard RPC.
	AuthServiceGetTimeCardProcedure = "/auth.v1.AuthService/GetTimeCard"
	// AuthServiceListTimeCardsProcedure is the fully-qualified name of the AuthService's ListTimeCards
	// RPC.
	AuthServiceListTimeCardsProcedure = "/auth.v1.AuthService/ListTimeCards"
	// AuthServiceCreateTimeCardProcedure is the fully-qualified name of the AuthService's
	// CreateTimeCard RPC.
	AuthServiceCreateTimeCardProcedure = "/auth.v1.AuthService/CreateTimeCard"
	// AuthServiceUpdateTimeCardProcedure is the fully-qualified name of the AuthService's
	// UpdateTimeCard RPC.
	AuthServiceUpdateTimeCardProcedure = "/auth.v1.AuthService/UpdateTimeCard"
	// AuthServiceDeleteTimeCardProcedure is the fully-qualified name of the AuthService's
	// DeleteTimeCard RPC.
	AuthServiceDeleteTimeCardProcedure = "/auth.v1.AuthService/DeleteTimeCard"
	// AuthServiceGetTimeCardLogProcedure is the fully-qualified name of the AuthService's
	// GetTimeCardLog RPC.
	AuthServiceGetTimeCardLogProcedure = "/auth.v1.AuthService/GetTimeCardLog"
	// AuthServiceListTimeCardLogsProcedure is the fully-qualified name of the AuthService's
	// ListTimeCardLogs RPC.
	AuthServiceListTimeCardLogsProcedure = "/auth.v1.AuthService/ListTimeCardLogs"
	// AuthServiceListTimeCardLogsByCardIDProcedure is the fully-qualified name of the AuthService's
	// ListTimeCardLogsByCardID RPC.
	AuthServiceListTimeCardLogsByCardIDProcedure = "/auth.v1.AuthService/ListTimeCardLogsByCardID"
	// AuthServiceCreateTimeCardLogProcedure is the fully-qualified name of the AuthService's
	// CreateTimeCardLog RPC.
	AuthServiceCreateTimeCardLogProcedure = "/auth.v1.AuthService/CreateTimeCardLog"
	// AuthServiceUpdateTimeCardLogProcedure is the fully-qualified name of the AuthService's
	// UpdateTimeCardLog RPC.
	AuthServiceUpdateTimeCardLogProcedure = "/auth.v1.AuthService/UpdateTimeCardLog"
	// AuthServiceDeleteTimeCardLogProcedure is the fully-qualified name of the AuthService's
	// DeleteTimeCardLog RPC.
	AuthServiceDeleteTimeCardLogProcedure = "/auth.v1.AuthService/DeleteTimeCardLog"
)

// AuthServiceClient is a client for the auth.v1.AuthService service.
type AuthServiceClient interface {
	// Heartbeat returns server status and timestamp
	Heartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error)
	// GetAuthorizationURL returns the WOFF OAuth authorization URL
	GetAuthorizationURL(context.Context, *connect.Request[v1.GetAuthorizationURLRequest]) (*connect.Response[v1.GetAuthorizationURLResponse], error)
	// ExchangeCode exchanges authorization code for access token
	ExchangeCode(context.Context, *connect.Request[v1.ExchangeCodeRequest]) (*connect.Response[v1.ExchangeCodeResponse], error)
	// GetProfile returns the authenticated user's profile (requires WOFF access token)
	GetProfile(context.Context, *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error)
	// RefreshToken refreshes an existing WOFF access token
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	// VerifyToken verifies a WOFF access token
	VerifyToken(context.Context, *connect.Request[v1.VerifyTokenRequest]) (*connect.Response[v1.VerifyTokenResponse], error)
	// ListUsers returns a list of all registered users (requires authentication)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	// UpdateUserRoles updates roles for a user (requires admin role)
	UpdateUserRoles(context.Context, *connect.Request[v1.UpdateUserRolesRequest]) (*connect.Response[v1.UpdateUserRolesResponse], error)
	// DeleteUser soft deletes a user (requires admin role)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	// RestoreUser restores a soft-deleted user (requires admin role)
	RestoreUser(context.Context, *connect.Request[v1.RestoreUserRequest]) (*connect.Response[v1.RestoreUserResponse], error)
	// GetTimeCard retrieves a timecard by composite key (datetime + id)
	GetTimeCard(context.Context, *connect.Request[v1.GetTimeCardRequest]) (*connect.Response[v1.TimeCardResponse], error)
	// ListTimeCards retrieves a list of timecards with optional pagination
	ListTimeCards(context.Context, *connect.Request[v1.ListTimeCardsRequest]) (*connect.Response[v1.ListTimeCardsResponse], error)
	// CreateTimeCard creates a new timecard (dev environment only)
	CreateTimeCard(context.Context, *connect.Request[v1.CreateTimeCardRequest]) (*connect.Response[v1.TimeCardResponse], error)
	// UpdateTimeCard updates an existing timecard (dev environment only)
	UpdateTimeCard(context.Context, *connect.Request[v1.UpdateTimeCardRequest]) (*connect.Response[v1.TimeCardResponse], error)
	// DeleteTimeCard deletes a timecard (dev environment only)
	DeleteTimeCard(context.Context, *connect.Request[v1.DeleteTimeCardRequest]) (*connect.Response[v1.DeleteTimeCardResponse], error)
	// GetTimeCardLog retrieves a timecard log by composite key (datetime + id)
	GetTimeCardLog(context.Context, *connect.Request[v1.GetTimeCardLogRequest]) (*connect.Response[v1.TimeCardLogResponse], error)
	// ListTimeCardLogs retrieves a list of timecard logs with optional pagination
	ListTimeCardLogs(context.Context, *connect.Request[v1.ListTimeCardLogsRequest]) (*connect.Response[v1.ListTimeCardLogsResponse], error)
	// ListTimeCardLogsByCardID retrieves timecard logs by card_id with pagination
	ListTimeCardLogsByCardID(context.Context, *connect.Request[v1.ListTimeCardLogsByCardIDRequest]) (*connect.Response[v1.ListTimeCardLogsResponse], error)
	// CreateTimeCardLog creates a new timecard log (dev environment only)
	CreateTimeCardLog(context.Context, *connect.Request[v1.CreateTimeCardLogRequest]) (*connect.Response[v1.TimeCardLogResponse], error)
	// UpdateTimeCardLog updates an existing timecard log (dev environment only)
	UpdateTimeCardLog(context.Context, *connect.Request[v1.UpdateTimeCardLogRequest]) (*connect.Response[v1.TimeCardLogResponse], error)
	// DeleteTimeCardLog deletes a timecard log (dev environment only)
	DeleteTimeCardLog(context.Context, *connect.Request[v1.DeleteTimeCardLogRequest]) (*connect.Response[v1.DeleteTimeCardLogResponse], error)
}

// NewAuthServiceClient constructs a client for the auth.v1.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		heartbeat: connect.NewClient[v1.HeartbeatRequest, v1.HeartbeatResponse](
			httpClient,
			baseURL+AuthServiceHeartbeatProcedure,
			connect.WithSchema(authServiceMethods.ByName("Heartbeat")),
			connect.WithClientOptions(opts...),
		),
		getAuthorizationURL: connect.NewClient[v1.GetAuthorizationURLRequest, v1.GetAuthorizationURLResponse](
			httpClient,
			baseURL+AuthServiceGetAuthorizationURLProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetAuthorizationURL")),
			connect.WithClientOptions(opts...),
		),
		exchangeCode: connect.NewClient[v1.ExchangeCodeRequest, v1.ExchangeCodeResponse](
			httpClient,
			baseURL+AuthServiceExchangeCodeProcedure,
			connect.WithSchema(authServiceMethods.ByName("ExchangeCode")),
			connect.WithClientOptions(opts...),
		),
		getProfile: connect.NewClient[v1.GetProfileRequest, v1.GetProfileResponse](
			httpClient,
			baseURL+AuthServiceGetProfileProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetProfile")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+AuthServiceRefreshTokenProcedure,
			connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		verifyToken: connect.NewClient[v1.VerifyTokenRequest, v1.VerifyTokenResponse](
			httpClient,
			baseURL+AuthServiceVerifyTokenProcedure,
			connect.WithSchema(authServiceMethods.ByName("VerifyToken")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+AuthServiceListUsersProcedure,
			connect.WithSchema(authServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		updateUserRoles: connect.NewClient[v1.UpdateUserRolesRequest, v1.UpdateUserRolesResponse](
			httpClient,
			baseURL+AuthServiceUpdateUserRolesProcedure,
			connect.WithSchema(authServiceMethods.ByName("UpdateUserRoles")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, v1.DeleteUserResponse](
			httpClient,
			baseURL+AuthServiceDeleteUserProcedure,
			connect.WithSchema(authServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		restoreUser: connect.NewClient[v1.RestoreUserRequest, v1.RestoreUserResponse](
			httpClient,
			baseURL+AuthServiceRestoreUserProcedure,
			connect.WithSchema(authServiceMethods.ByName("RestoreUser")),
			connect.WithClientOptions(opts...),
		),
		getTimeCard: connect.NewClient[v1.GetTimeCardRequest, v1.TimeCardResponse](
			httpClient,
			baseURL+AuthServiceGetTimeCardProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetTimeCard")),
			connect.WithClientOptions(opts...),
		),
		listTimeCards: connect.NewClient[v1.ListTimeCardsRequest, v1.ListTimeCardsResponse](
			httpClient,
			baseURL+AuthServiceListTimeCardsProcedure,
			connect.WithSchema(authServiceMethods.ByName("ListTimeCards")),
			connect.WithClientOptions(opts...),
		),
		createTimeCard: connect.NewClient[v1.CreateTimeCardRequest, v1.TimeCardResponse](
			httpClient,
			baseURL+AuthServiceCreateTimeCardProcedure,
			connect.WithSchema(authServiceMethods.ByName("CreateTimeCard")),
			connect.WithClientOptions(opts...),
		),
		updateTimeCard: connect.NewClient[v1.UpdateTimeCardRequest, v1.TimeCardResponse](
			httpClient,
			baseURL+AuthServiceUpdateTimeCardProcedure,
			connect.WithSchema(authServiceMethods.ByName("UpdateTimeCard")),
			connect.WithClientOptions(opts...),
		),
		deleteTimeCard: connect.NewClient[v1.DeleteTimeCardRequest, v1.DeleteTimeCardResponse](
			httpClient,
			baseURL+AuthServiceDeleteTimeCardProcedure,
			connect.WithSchema(authServiceMethods.ByName("DeleteTimeCard")),
			connect.WithClientOptions(opts...),
		),
		getTimeCardLog: connect.NewClient[v1.GetTimeCardLogRequest, v1.TimeCardLogResponse](
			httpClient,
			baseURL+AuthServiceGetTimeCardLogProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetTimeCardLog")),
			connect.WithClientOptions(opts...),
		),
		listTimeCardLogs: connect.NewClient[v1.ListTimeCardLogsRequest, v1.ListTimeCardLogsResponse](
			httpClient,
			baseURL+AuthServiceListTimeCardLogsProcedure,
			connect.WithSchema(authServiceMethods.ByName("ListTimeCardLogs")),
			connect.WithClientOptions(opts...),
		),
		listTimeCardLogsByCardID: connect.NewClient[v1.ListTimeCardLogsByCardIDRequest, v1.ListTimeCardLogsResponse](
			httpClient,
			baseURL+AuthServiceListTimeCardLogsByCardIDProcedure,
			connect.WithSchema(authServiceMethods.ByName("ListTimeCardLogsByCardID")),
			connect.WithClientOptions(opts...),
		),
		createTimeCardLog: connect.NewClient[v1.CreateTimeCardLogRequest, v1.TimeCardLogResponse](
			httpClient,
			baseURL+AuthServiceCreateTimeCardLogProcedure,
			connect.WithSchema(authServiceMethods.ByName("CreateTimeCardLog")),
			connect.WithClientOptions(opts...),
		),
		updateTimeCardLog: connect.NewClient[v1.UpdateTimeCardLogRequest, v1.TimeCardLogResponse](
			httpClient,
			baseURL+AuthServiceUpdateTimeCardLogProcedure,
			connect.WithSchema(authServiceMethods.ByName("UpdateTimeCardLog")),
			connect.WithClientOptions(opts...),
		),
		deleteTimeCardLog: connect.NewClient[v1.DeleteTimeCardLogRequest, v1.DeleteTimeCardLogResponse](
			httpClient,
			baseURL+AuthServiceDeleteTimeCardLogProcedure,
			connect.WithSchema(authServiceMethods.ByName("DeleteTimeCardLog")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	heartbeat                *connect.Client[v1.HeartbeatRequest, v1.HeartbeatResponse]
	getAuthorizationURL      *connect.Client[v1.GetAuthorizationURLRequest, v1.GetAuthorizationURLResponse]
	exchangeCode             *connect.Client[v1.ExchangeCodeRequest, v1.ExchangeCodeResponse]
	getProfile               *connect.Client[v1.GetProfileRequest, v1.GetProfileResponse]
	refreshToken             *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	verifyToken              *connect.Client[v1.VerifyTokenRequest, v1.VerifyTokenResponse]
	listUsers                *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	updateUserRoles          *connect.Client[v1.UpdateUserRolesRequest, v1.UpdateUserRolesResponse]
	deleteUser               *connect.Client[v1.DeleteUserRequest, v1.DeleteUserResponse]
	restoreUser              *connect.Client[v1.RestoreUserRequest, v1.RestoreUserResponse]
	getTimeCard              *connect.Client[v1.GetTimeCardRequest, v1.TimeCardResponse]
	listTimeCards            *connect.Client[v1.ListTimeCardsRequest, v1.ListTimeCardsResponse]
	createTimeCard           *connect.Client[v1.CreateTimeCardRequest, v1.TimeCardResponse]
	updateTimeCard           *connect.Client[v1.UpdateTimeCardRequest, v1.TimeCardResponse]
	deleteTimeCard           *connect.Client[v1.DeleteTimeCardRequest, v1.DeleteTimeCardResponse]
	getTimeCardLog           *connect.Client[v1.GetTimeCardLogRequest, v1.TimeCardLogResponse]
	listTimeCardLogs         *connect.Client[v1.ListTimeCardLogsRequest, v1.ListTimeCardLogsResponse]
	listTimeCardLogsByCardID *connect.Client[v1.ListTimeCardLogsByCardIDRequest, v1.ListTimeCardLogsResponse]
	createTimeCardLog        *connect.Client[v1.CreateTimeCardLogRequest, v1.TimeCardLogResponse]
	updateTimeCardLog        *connect.Client[v1.UpdateTimeCardLogRequest, v1.TimeCardLogResponse]
	deleteTimeCardLog        *connect.Client[v1.DeleteTimeCardLogRequest, v1.DeleteTimeCardLogResponse]
}

// Heartbeat calls auth.v1.AuthService.Heartbeat.
func (c *authServiceClient) Heartbeat(ctx context.Context, req *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error) {
	return c.heartbeat.CallUnary(ctx, req)
}

// GetAuthorizationURL calls auth.v1.AuthService.GetAuthorizationURL.
func (c *authServiceClient) GetAuthorizationURL(ctx context.Context, req *connect.Request[v1.GetAuthorizationURLRequest]) (*connect.Response[v1.GetAuthorizationURLResponse], error) {
	return c.getAuthorizationURL.CallUnary(ctx, req)
}

// ExchangeCode calls auth.v1.AuthService.ExchangeCode.
func (c *authServiceClient) ExchangeCode(ctx context.Context, req *connect.Request[v1.ExchangeCodeRequest]) (*connect.Response[v1.ExchangeCodeResponse], error) {
	return c.exchangeCode.CallUnary(ctx, req)
}

// GetProfile calls auth.v1.AuthService.GetProfile.
func (c *authServiceClient) GetProfile(ctx context.Context, req *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error) {
	return c.getProfile.CallUnary(ctx, req)
}

// RefreshToken calls auth.v1.AuthService.RefreshToken.
func (c *authServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// VerifyToken calls auth.v1.AuthService.VerifyToken.
func (c *authServiceClient) VerifyToken(ctx context.Context, req *connect.Request[v1.VerifyTokenRequest]) (*connect.Response[v1.VerifyTokenResponse], error) {
	return c.verifyToken.CallUnary(ctx, req)
}

// ListUsers calls auth.v1.AuthService.ListUsers.
func (c *authServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// UpdateUserRoles calls auth.v1.AuthService.UpdateUserRoles.
func (c *authServiceClient) UpdateUserRoles(ctx context.Context, req *connect.Request[v1.UpdateUserRolesRequest]) (*connect.Response[v1.UpdateUserRolesResponse], error) {
	return c.updateUserRoles.CallUnary(ctx, req)
}

// DeleteUser calls auth.v1.AuthService.DeleteUser.
func (c *authServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// RestoreUser calls auth.v1.AuthService.RestoreUser.
func (c *authServiceClient) RestoreUser(ctx context.Context, req *connect.Request[v1.RestoreUserRequest]) (*connect.Response[v1.RestoreUserResponse], error) {
	return c.restoreUser.CallUnary(ctx, req)
}

// GetTimeCard calls auth.v1.AuthService.GetTimeCard.
func (c *authServiceClient) GetTimeCard(ctx context.Context, req *connect.Request[v1.GetTimeCardRequest]) (*connect.Response[v1.TimeCardResponse], error) {
	return c.getTimeCard.CallUnary(ctx, req)
}

// ListTimeCards calls auth.v1.AuthService.ListTimeCards.
func (c *authServiceClient) ListTimeCards(ctx context.Context, req *connect.Request[v1.ListTimeCardsRequest]) (*connect.Response[v1.ListTimeCardsResponse], error) {
	return c.listTimeCards.CallUnary(ctx, req)
}

// CreateTimeCard calls auth.v1.AuthService.CreateTimeCard.
func (c *authServiceClient) CreateTimeCard(ctx context.Context, req *connect.Request[v1.CreateTimeCardRequest]) (*connect.Response[v1.TimeCardResponse], error) {
	return c.createTimeCard.CallUnary(ctx, req)
}

// UpdateTimeCard calls auth.v1.AuthService.UpdateTimeCard.
func (c *authServiceClient) UpdateTimeCard(ctx context.Context, req *connect.Request[v1.UpdateTimeCardRequest]) (*connect.Response[v1.TimeCardResponse], error) {
	return c.updateTimeCard.CallUnary(ctx, req)
}

// DeleteTimeCard calls auth.v1.AuthService.DeleteTimeCard.
func (c *authServiceClient) DeleteTimeCard(ctx context.Context, req *connect.Request[v1.DeleteTimeCardRequest]) (*connect.Response[v1.DeleteTimeCardResponse], error) {
	return c.deleteTimeCard.CallUnary(ctx, req)
}

// GetTimeCardLog calls auth.v1.AuthService.GetTimeCardLog.
func (c *authServiceClient) GetTimeCardLog(ctx context.Context, req *connect.Request[v1.GetTimeCardLogRequest]) (*connect.Response[v1.TimeCardLogResponse], error) {
	return c.getTimeCardLog.CallUnary(ctx, req)
}

// ListTimeCardLogs calls auth.v1.AuthService.ListTimeCardLogs.
func (c *authServiceClient) ListTimeCardLogs(ctx context.Context, req *connect.Request[v1.ListTimeCardLogsRequest]) (*connect.Response[v1.ListTimeCardLogsResponse], error) {
	return c.listTimeCardLogs.CallUnary(ctx, req)
}

// ListTimeCardLogsByCardID calls auth.v1.AuthService.ListTimeCardLogsByCardID.
func (c *authServiceClient) ListTimeCardLogsByCardID(ctx context.Context, req *connect.Request[v1.ListTimeCardLogsByCardIDRequest]) (*connect.Response[v1.ListTimeCardLogsResponse], error) {
	return c.listTimeCardLogsByCardID.CallUnary(ctx, req)
}

// CreateTimeCardLog calls auth.v1.AuthService.CreateTimeCardLog.
func (c *authServiceClient) CreateTimeCardLog(ctx context.Context, req *connect.Request[v1.CreateTimeCardLogRequest]) (*connect.Response[v1.TimeCardLogResponse], error) {
	return c.createTimeCardLog.CallUnary(ctx, req)
}

// UpdateTimeCardLog calls auth.v1.AuthService.UpdateTimeCardLog.
func (c *authServiceClient) UpdateTimeCardLog(ctx context.Context, req *connect.Request[v1.UpdateTimeCardLogRequest]) (*connect.Response[v1.TimeCardLogResponse], error) {
	return c.updateTimeCardLog.CallUnary(ctx, req)
}

// DeleteTimeCardLog calls auth.v1.AuthService.DeleteTimeCardLog.
func (c *authServiceClient) DeleteTimeCardLog(ctx context.Context, req *connect.Request[v1.DeleteTimeCardLogRequest]) (*connect.Response[v1.DeleteTimeCardLogResponse], error) {
	return c.deleteTimeCardLog.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.v1.AuthService service.
type AuthServiceHandler interface {
	// Heartbeat returns server status and timestamp
	Heartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error)
	// GetAuthorizationURL returns the WOFF OAuth authorization URL
	GetAuthorizationURL(context.Context, *connect.Request[v1.GetAuthorizationURLRequest]) (*connect.Response[v1.GetAuthorizationURLResponse], error)
	// ExchangeCode exchanges authorization code for access token
	ExchangeCode(context.Context, *connect.Request[v1.ExchangeCodeRequest]) (*connect.Response[v1.ExchangeCodeResponse], error)
	// GetProfile returns the authenticated user's profile (requires WOFF access token)
	GetProfile(context.Context, *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error)
	// RefreshToken refreshes an existing WOFF access token
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	// VerifyToken verifies a WOFF access token
	VerifyToken(context.Context, *connect.Request[v1.VerifyTokenRequest]) (*connect.Response[v1.VerifyTokenResponse], error)
	// ListUsers returns a list of all registered users (requires authentication)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	// UpdateUserRoles updates roles for a user (requires admin role)
	UpdateUserRoles(context.Context, *connect.Request[v1.UpdateUserRolesRequest]) (*connect.Response[v1.UpdateUserRolesResponse], error)
	// DeleteUser soft deletes a user (requires admin role)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	// RestoreUser restores a soft-deleted user (requires admin role)
	RestoreUser(context.Context, *connect.Request[v1.RestoreUserRequest]) (*connect.Response[v1.RestoreUserResponse], error)
	// GetTimeCard retrieves a timecard by composite key (datetime + id)
	GetTimeCard(context.Context, *connect.Request[v1.GetTimeCardRequest]) (*connect.Response[v1.TimeCardResponse], error)
	// ListTimeCards retrieves a list of timecards with optional pagination
	ListTimeCards(context.Context, *connect.Request[v1.ListTimeCardsRequest]) (*connect.Response[v1.ListTimeCardsResponse], error)
	// CreateTimeCard creates a new timecard (dev environment only)
	CreateTimeCard(context.Context, *connect.Request[v1.CreateTimeCardRequest]) (*connect.Response[v1.TimeCardResponse], error)
	// UpdateTimeCard updates an existing timecard (dev environment only)
	UpdateTimeCard(context.Context, *connect.Request[v1.UpdateTimeCardRequest]) (*connect.Response[v1.TimeCardResponse], error)
	// DeleteTimeCard deletes a timecard (dev environment only)
	DeleteTimeCard(context.Context, *connect.Request[v1.DeleteTimeCardRequest]) (*connect.Response[v1.DeleteTimeCardResponse], error)
	// GetTimeCardLog retrieves a timecard log by composite key (datetime + id)
	GetTimeCardLog(context.Context, *connect.Request[v1.GetTimeCardLogRequest]) (*connect.Response[v1.TimeCardLogResponse], error)
	// ListTimeCardLogs retrieves a list of timecard logs with optional pagination
	ListTimeCardLogs(context.Context, *connect.Request[v1.ListTimeCardLogsRequest]) (*connect.Response[v1.ListTimeCardLogsResponse], error)
	// ListTimeCardLogsByCardID retrieves timecard logs by card_id with pagination
	ListTimeCardLogsByCardID(context.Context, *connect.Request[v1.ListTimeCardLogsByCardIDRequest]) (*connect.Response[v1.ListTimeCardLogsResponse], error)
	// CreateTimeCardLog creates a new timecard log (dev environment only)
	CreateTimeCardLog(context.Context, *connect.Request[v1.CreateTimeCardLogRequest]) (*connect.Response[v1.TimeCardLogResponse], error)
	// UpdateTimeCardLog updates an existing timecard log (dev environment only)
	UpdateTimeCardLog(context.Context, *connect.Request[v1.UpdateTimeCardLogRequest]) (*connect.Response[v1.TimeCardLogResponse], error)
	// DeleteTimeCardLog deletes a timecard log (dev environment only)
	DeleteTimeCardLog(context.Context, *connect.Request[v1.DeleteTimeCardLogRequest]) (*connect.Response[v1.DeleteTimeCardLogResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	authServiceHeartbeatHandler := connect.NewUnaryHandler(
		AuthServiceHeartbeatProcedure,
		svc.Heartbeat,
		connect.WithSchema(authServiceMethods.ByName("Heartbeat")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetAuthorizationURLHandler := connect.NewUnaryHandler(
		AuthServiceGetAuthorizationURLProcedure,
		svc.GetAuthorizationURL,
		connect.WithSchema(authServiceMethods.ByName("GetAuthorizationURL")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceExchangeCodeHandler := connect.NewUnaryHandler(
		AuthServiceExchangeCodeProcedure,
		svc.ExchangeCode,
		connect.WithSchema(authServiceMethods.ByName("ExchangeCode")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetProfileHandler := connect.NewUnaryHandler(
		AuthServiceGetProfileProcedure,
		svc.GetProfile,
		connect.WithSchema(authServiceMethods.ByName("GetProfile")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRefreshTokenHandler := connect.NewUnaryHandler(
		AuthServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceVerifyTokenHandler := connect.NewUnaryHandler(
		AuthServiceVerifyTokenProcedure,
		svc.VerifyToken,
		connect.WithSchema(authServiceMethods.ByName("VerifyToken")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceListUsersHandler := connect.NewUnaryHandler(
		AuthServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(authServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUpdateUserRolesHandler := connect.NewUnaryHandler(
		AuthServiceUpdateUserRolesProcedure,
		svc.UpdateUserRoles,
		connect.WithSchema(authServiceMethods.ByName("UpdateUserRoles")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceDeleteUserHandler := connect.NewUnaryHandler(
		AuthServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(authServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRestoreUserHandler := connect.NewUnaryHandler(
		AuthServiceRestoreUserProcedure,
		svc.RestoreUser,
		connect.WithSchema(authServiceMethods.ByName("RestoreUser")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetTimeCardHandler := connect.NewUnaryHandler(
		AuthServiceGetTimeCardProcedure,
		svc.GetTimeCard,
		connect.WithSchema(authServiceMethods.ByName("GetTimeCard")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceListTimeCardsHandler := connect.NewUnaryHandler(
		AuthServiceListTimeCardsProcedure,
		svc.ListTimeCards,
		connect.WithSchema(authServiceMethods.ByName("ListTimeCards")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCreateTimeCardHandler := connect.NewUnaryHandler(
		AuthServiceCreateTimeCardProcedure,
		svc.CreateTimeCard,
		connect.WithSchema(authServiceMethods.ByName("CreateTimeCard")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUpdateTimeCardHandler := connect.NewUnaryHandler(
		AuthServiceUpdateTimeCardProcedure,
		svc.UpdateTimeCard,
		connect.WithSchema(authServiceMethods.ByName("UpdateTimeCard")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceDeleteTimeCardHandler := connect.NewUnaryHandler(
		AuthServiceDeleteTimeCardProcedure,
		svc.DeleteTimeCard,
		connect.WithSchema(authServiceMethods.ByName("DeleteTimeCard")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetTimeCardLogHandler := connect.NewUnaryHandler(
		AuthServiceGetTimeCardLogProcedure,
		svc.GetTimeCardLog,
		connect.WithSchema(authServiceMethods.ByName("GetTimeCardLog")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceListTimeCardLogsHandler := connect.NewUnaryHandler(
		AuthServiceListTimeCardLogsProcedure,
		svc.ListTimeCardLogs,
		connect.WithSchema(authServiceMethods.ByName("ListTimeCardLogs")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceListTimeCardLogsByCardIDHandler := connect.NewUnaryHandler(
		AuthServiceListTimeCardLogsByCardIDProcedure,
		svc.ListTimeCardLogsByCardID,
		connect.WithSchema(authServiceMethods.ByName("ListTimeCardLogsByCardID")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCreateTimeCardLogHandler := connect.NewUnaryHandler(
		AuthServiceCreateTimeCardLogProcedure,
		svc.CreateTimeCardLog,
		connect.WithSchema(authServiceMethods.ByName("CreateTimeCardLog")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUpdateTimeCardLogHandler := connect.NewUnaryHandler(
		AuthServiceUpdateTimeCardLogProcedure,
		svc.UpdateTimeCardLog,
		connect.WithSchema(authServiceMethods.ByName("UpdateTimeCardLog")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceDeleteTimeCardLogHandler := connect.NewUnaryHandler(
		AuthServiceDeleteTimeCardLogProcedure,
		svc.DeleteTimeCardLog,
		connect.WithSchema(authServiceMethods.ByName("DeleteTimeCardLog")),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceHeartbeatProcedure:
			authServiceHeartbeatHandler.ServeHTTP(w, r)
		case AuthServiceGetAuthorizationURLProcedure:
			authServiceGetAuthorizationURLHandler.ServeHTTP(w, r)
		case AuthServiceExchangeCodeProcedure:
			authServiceExchangeCodeHandler.ServeHTTP(w, r)
		case AuthServiceGetProfileProcedure:
			authServiceGetProfileHandler.ServeHTTP(w, r)
		case AuthServiceRefreshTokenProcedure:
			authServiceRefreshTokenHandler.ServeHTTP(w, r)
		case AuthServiceVerifyTokenProcedure:
			authServiceVerifyTokenHandler.ServeHTTP(w, r)
		case AuthServiceListUsersProcedure:
			authServiceListUsersHandler.ServeHTTP(w, r)
		case AuthServiceUpdateUserRolesProcedure:
			authServiceUpdateUserRolesHandler.ServeHTTP(w, r)
		case AuthServiceDeleteUserProcedure:
			authServiceDeleteUserHandler.ServeHTTP(w, r)
		case AuthServiceRestoreUserProcedure:
			authServiceRestoreUserHandler.ServeHTTP(w, r)
		case AuthServiceGetTimeCardProcedure:
			authServiceGetTimeCardHandler.ServeHTTP(w, r)
		case AuthServiceListTimeCardsProcedure:
			authServiceListTimeCardsHandler.ServeHTTP(w, r)
		case AuthServiceCreateTimeCardProcedure:
			authServiceCreateTimeCardHandler.ServeHTTP(w, r)
		case AuthServiceUpdateTimeCardProcedure:
			authServiceUpdateTimeCardHandler.ServeHTTP(w, r)
		case AuthServiceDeleteTimeCardProcedure:
			authServiceDeleteTimeCardHandler.ServeHTTP(w, r)
		case AuthServiceGetTimeCardLogProcedure:
			authServiceGetTimeCardLogHandler.ServeHTTP(w, r)
		case AuthServiceListTimeCardLogsProcedure:
			authServiceListTimeCardLogsHandler.ServeHTTP(w, r)
		case AuthServiceListTimeCardLogsByCardIDProcedure:
			authServiceListTimeCardLogsByCardIDHandler.ServeHTTP(w, r)
		case AuthServiceCreateTimeCardLogProcedure:
			authServiceCreateTimeCardLogHandler.ServeHTTP(w, r)
		case AuthServiceUpdateTimeCardLogProcedure:
			authServiceUpdateTimeCardLogHandler.ServeHTTP(w, r)
		case AuthServiceDeleteTimeCardLogProcedure:
			authServiceDeleteTimeCardLogHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Heartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.Heartbeat is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetAuthorizationURL(context.Context, *connect.Request[v1.GetAuthorizationURLRequest]) (*connect.Response[v1.GetAuthorizationURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.GetAuthorizationURL is not implemented"))
}

func (UnimplementedAuthServiceHandler) ExchangeCode(context.Context, *connect.Request[v1.ExchangeCodeRequest]) (*connect.Response[v1.ExchangeCodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.ExchangeCode is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetProfile(context.Context, *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.GetProfile is not implemented"))
}

func (UnimplementedAuthServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.RefreshToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyToken(context.Context, *connect.Request[v1.VerifyTokenRequest]) (*connect.Response[v1.VerifyTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.VerifyToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.ListUsers is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdateUserRoles(context.Context, *connect.Request[v1.UpdateUserRolesRequest]) (*connect.Response[v1.UpdateUserRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.UpdateUserRoles is not implemented"))
}

func (UnimplementedAuthServiceHandler) DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.DeleteUser is not implemented"))
}

func (UnimplementedAuthServiceHandler) RestoreUser(context.Context, *connect.Request[v1.RestoreUserRequest]) (*connect.Response[v1.RestoreUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.RestoreUser is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetTimeCard(context.Context, *connect.Request[v1.GetTimeCardRequest]) (*connect.Response[v1.TimeCardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.GetTimeCard is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListTimeCards(context.Context, *connect.Request[v1.ListTimeCardsRequest]) (*connect.Response[v1.ListTimeCardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.ListTimeCards is not implemented"))
}

func (UnimplementedAuthServiceHandler) CreateTimeCard(context.Context, *connect.Request[v1.CreateTimeCardRequest]) (*connect.Response[v1.TimeCardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.CreateTimeCard is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdateTimeCard(context.Context, *connect.Request[v1.UpdateTimeCardRequest]) (*connect.Response[v1.TimeCardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.UpdateTimeCard is not implemented"))
}

func (UnimplementedAuthServiceHandler) DeleteTimeCard(context.Context, *connect.Request[v1.DeleteTimeCardRequest]) (*connect.Response[v1.DeleteTimeCardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.DeleteTimeCard is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetTimeCardLog(context.Context, *connect.Request[v1.GetTimeCardLogRequest]) (*connect.Response[v1.TimeCardLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.GetTimeCardLog is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListTimeCardLogs(context.Context, *connect.Request[v1.ListTimeCardLogsRequest]) (*connect.Response[v1.ListTimeCardLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.ListTimeCardLogs is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListTimeCardLogsByCardID(context.Context, *connect.Request[v1.ListTimeCardLogsByCardIDRequest]) (*connect.Response[v1.ListTimeCardLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.ListTimeCardLogsByCardID is not implemented"))
}

func (UnimplementedAuthServiceHandler) CreateTimeCardLog(context.Context, *connect.Request[v1.CreateTimeCardLogRequest]) (*connect.Response[v1.TimeCardLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.CreateTimeCardLog is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdateTimeCardLog(context.Context, *connect.Request[v1.UpdateTimeCardLogRequest]) (*connect.Response[v1.TimeCardLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.UpdateTimeCardLog is not implemented"))
}

func (UnimplementedAuthServiceHandler) DeleteTimeCardLog(context.Context, *connect.Request[v1.DeleteTimeCardLogRequest]) (*connect.Response[v1.DeleteTimeCardLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.DeleteTimeCardLog is not implemented"))
}
