syntax = "proto3";

package auth.v1;

option go_package = "menkyo_go/proto/auth/v1;authv1";

// UserRole defines the available user roles
enum UserRole {
  USER_ROLE_UNSPECIFIED = 0;  // Default/unspecified role
  USER_ROLE_ADMIN = 1;         // Administrator with full access
  USER_ROLE_MAINTAINER = 2;    // Maintainer with limited admin access
  USER_ROLE_USER = 3;          // Regular user
}

// AuthService handles WOFF (Works Office) authentication operations
service AuthService {
  // GetAuthorizationURL returns the WOFF OAuth authorization URL
  rpc GetAuthorizationURL(GetAuthorizationURLRequest) returns (GetAuthorizationURLResponse);

  // ExchangeCode exchanges authorization code for access token
  rpc ExchangeCode(ExchangeCodeRequest) returns (ExchangeCodeResponse);

  // GetProfile returns the authenticated user's profile (requires WOFF access token)
  rpc GetProfile(GetProfileRequest) returns (GetProfileResponse);

  // RefreshToken refreshes an existing WOFF access token
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);

  // VerifyToken verifies a WOFF access token
  rpc VerifyToken(VerifyTokenRequest) returns (VerifyTokenResponse);

  // ListUsers returns a list of all registered users (requires authentication)
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);

  // UpdateUserRoles updates roles for a user (requires admin role)
  rpc UpdateUserRoles(UpdateUserRolesRequest) returns (UpdateUserRolesResponse);

  // DeleteUser soft deletes a user (requires admin role)
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);

  // RestoreUser restores a soft-deleted user (requires admin role)
  rpc RestoreUser(RestoreUserRequest) returns (RestoreUserResponse);

  // GetTimeCard retrieves a timecard by composite key (datetime + id)
  rpc GetTimeCard(GetTimeCardRequest) returns (TimeCardResponse);

  // ListTimeCards retrieves a list of timecards with optional pagination
  rpc ListTimeCards(ListTimeCardsRequest) returns (ListTimeCardsResponse);

  // CreateTimeCard creates a new timecard (dev environment only)
  rpc CreateTimeCard(CreateTimeCardRequest) returns (TimeCardResponse);

  // UpdateTimeCard updates an existing timecard (dev environment only)
  rpc UpdateTimeCard(UpdateTimeCardRequest) returns (TimeCardResponse);

  // DeleteTimeCard deletes a timecard (dev environment only)
  rpc DeleteTimeCard(DeleteTimeCardRequest) returns (DeleteTimeCardResponse);

  // GetTimeCardLog retrieves a timecard log by composite key (datetime + id)
  rpc GetTimeCardLog(GetTimeCardLogRequest) returns (TimeCardLogResponse);

  // ListTimeCardLogs retrieves a list of timecard logs with optional pagination
  rpc ListTimeCardLogs(ListTimeCardLogsRequest) returns (ListTimeCardLogsResponse);

  // ListTimeCardLogsByCardID retrieves timecard logs by card_id with pagination
  rpc ListTimeCardLogsByCardID(ListTimeCardLogsByCardIDRequest) returns (ListTimeCardLogsResponse);

  // CreateTimeCardLog creates a new timecard log (dev environment only)
  rpc CreateTimeCardLog(CreateTimeCardLogRequest) returns (TimeCardLogResponse);

  // UpdateTimeCardLog updates an existing timecard log (dev environment only)
  rpc UpdateTimeCardLog(UpdateTimeCardLogRequest) returns (TimeCardLogResponse);

  // DeleteTimeCardLog deletes a timecard log (dev environment only)
  rpc DeleteTimeCardLog(DeleteTimeCardLogRequest) returns (DeleteTimeCardLogResponse);
}

// DBEnvironment specifies which database to use
enum DBEnvironment {
  DB_ENVIRONMENT_UNSPECIFIED = 0;  // Default (uses prod)
  DB_ENVIRONMENT_PROD = 1;          // Production DB (read-only)
  DB_ENVIRONMENT_DEV = 2;           // Development DB (read-write)
}

// Request to get OAuth authorization URL
message GetAuthorizationURLRequest {
  string provider = 1; // "woff" or "line" (default: "woff")
  string redirect_uri = 2;
  string state = 3; // CSRF protection state
  repeated string scopes = 4; // Optional scopes
}

// Response containing the authorization URL
message GetAuthorizationURLResponse {
  string authorization_url = 1;
  string state = 2;
}

// Request to exchange authorization code for tokens
message ExchangeCodeRequest {
  string provider = 1; // "woff" or "line" (default: "woff")
  string code = 2;
  string redirect_uri = 3;
  string state = 4; // CSRF verification
}

// Response containing OAuth access tokens and user info
message ExchangeCodeResponse {
  string access_token = 1;
  string refresh_token = 2;
  int64 expires_in = 3;
  string token_type = 4;
  repeated string scope = 5;
  // User information (included for convenience)
  string user_id = 6;
  string provider = 7;  // "woff" or "line"
  string user_name = 8;
  string email = 9;
  string display_name = 10;
  string domain_id = 11;
  repeated string roles = 12;
  string profile_image_url = 13;
}

message GetProfileRequest {
  // Empty - user info will be extracted from WOFF token in metadata
}

message GetProfileResponse {
  string user_id = 1;
  string provider = 2;  // "woff" or "line"
  string user_name = 3;
  string email = 4;
  string display_name = 5;
  string domain_id = 6;
  repeated string roles = 7;
  string profile_image_url = 8;
}

message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  string access_token = 1;
  int64 expires_in = 2;
  string token_type = 3;
}

message VerifyTokenRequest {
  string access_token = 1;
}

message VerifyTokenResponse {
  bool valid = 1;
  string user_id = 2;
  int64 expires_at = 3;
  repeated string scopes = 4;
}

message ListUsersRequest {
  int32 page = 1;      // Page number (default: 1)
  int32 page_size = 2; // Number of users per page (default: 50, max: 100)
  bool include_deleted = 3; // Include soft-deleted users (default: false)
}

message User {
  string user_id = 1;
  string provider = 2;  // "woff" or "line"
  string user_name = 3;
  string display_name = 4;
  repeated string roles = 5;
  string created_at = 6;
  string updated_at = 7;
  bool is_deleted = 8;
}

message ListUsersResponse {
  repeated User users = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 page_size = 4;
}

message UpdateUserRolesRequest {
  string user_id = 1;
  repeated string roles = 2; // New roles to set for the user
}

message UpdateUserRolesResponse {
  bool success = 1;
  string message = 2;
  repeated string roles = 3; // Updated roles
}

message DeleteUserRequest {
  string user_id = 1;
}

message DeleteUserResponse {
  bool success = 1;
  string message = 2;
}

message RestoreUserRequest {
  string user_id = 1;
}

message RestoreUserResponse {
  bool success = 1;
  string message = 2;
}

// TimeCard represents a single timecard entry
message TimeCard {
  string datetime = 1;        // RFC3339 format timestamp
  int32 id = 2;               // User ID
  string machine_ip = 3;      // Machine IP address
  string state = 4;           // State (e.g., "in", "out")
  string state_detail = 5;    // Optional state detail
  string created = 6;         // RFC3339 format timestamp
  string modified = 7;        // RFC3339 format timestamp
}

// GetTimeCardRequest requests a specific timecard by composite key
message GetTimeCardRequest {
  DBEnvironment environment = 1;  // Which database to use
  string datetime = 2;            // RFC3339 format timestamp
  int32 id = 3;                   // User ID
}

// TimeCardResponse returns a single timecard
message TimeCardResponse {
  TimeCard timecard = 1;
}

// ListTimeCardsRequest requests a list of timecards
message ListTimeCardsRequest {
  DBEnvironment environment = 1;  // Which database to use
  int32 limit = 2;                // Number of records to return (default: 50, max: 100)
  int32 offset = 3;               // Number of records to skip (default: 0)
  string order_by = 4;            // Order by field (default: "datetime DESC")
}

// ListTimeCardsResponse returns a list of timecards
message ListTimeCardsResponse {
  repeated TimeCard timecards = 1;
  int64 total_count = 2;          // Total number of timecards
}

// CreateTimeCardRequest creates a new timecard (dev only)
message CreateTimeCardRequest {
  string datetime = 1;        // RFC3339 format timestamp
  int32 id = 2;               // User ID
  string machine_ip = 3;      // Machine IP address
  string state = 4;           // State (e.g., "in", "out")
  string state_detail = 5;    // Optional state detail
}

// UpdateTimeCardRequest updates an existing timecard (dev only)
message UpdateTimeCardRequest {
  string datetime = 1;        // RFC3339 format timestamp (part of composite key)
  int32 id = 2;               // User ID (part of composite key)
  string machine_ip = 3;      // Machine IP address
  string state = 4;           // State (e.g., "in", "out")
  string state_detail = 5;    // Optional state detail
}

// DeleteTimeCardRequest deletes a timecard (dev only)
message DeleteTimeCardRequest {
  string datetime = 1;        // RFC3339 format timestamp
  int32 id = 2;               // User ID
}

// DeleteTimeCardResponse confirms deletion
message DeleteTimeCardResponse {
  bool success = 1;
  string message = 2;
}

// TimeCardLog represents a single timecard log entry
message TimeCardLog {
  string datetime = 1;        // RFC3339 format timestamp
  int32 id = 2;               // User ID
  string card_id = 3;         // Card ID (FeliCa UID etc.)
  string machine_ip = 4;      // Machine IP address
  string state = 5;           // State (e.g., "in", "out")
  string state_detail = 6;    // Optional state detail
  string created = 7;         // RFC3339 format timestamp
  string modified = 8;        // RFC3339 format timestamp
}

// GetTimeCardLogRequest requests a specific timecard log by composite key
message GetTimeCardLogRequest {
  DBEnvironment environment = 1;  // Which database to use
  string datetime = 2;            // RFC3339 format timestamp
  int32 id = 3;                   // User ID
}

// TimeCardLogResponse returns a single timecard log
message TimeCardLogResponse {
  TimeCardLog log = 1;
}

// ListTimeCardLogsRequest requests a list of timecard logs
message ListTimeCardLogsRequest {
  DBEnvironment environment = 1;  // Which database to use
  int32 limit = 2;                // Number of records to return (default: 50, max: 100)
  int32 offset = 3;               // Number of records to skip (default: 0)
  string order_by = 4;            // Order by field (default: "datetime DESC")
}

// ListTimeCardLogsByCardIDRequest requests timecard logs by card_id
message ListTimeCardLogsByCardIDRequest {
  DBEnvironment environment = 1;  // Which database to use
  string card_id = 2;             // Card ID to filter by
  int32 limit = 3;                // Number of records to return (default: 50, max: 100)
  int32 offset = 4;               // Number of records to skip (default: 0)
  string order_by = 5;            // Order by field (default: "datetime DESC")
}

// ListTimeCardLogsResponse returns a list of timecard logs
message ListTimeCardLogsResponse {
  repeated TimeCardLog logs = 1;
  int64 total_count = 2;          // Total number of logs
}

// CreateTimeCardLogRequest creates a new timecard log (dev only)
message CreateTimeCardLogRequest {
  string datetime = 1;        // RFC3339 format timestamp
  int32 id = 2;               // User ID
  string card_id = 3;         // Card ID (FeliCa UID etc.)
  string machine_ip = 4;      // Machine IP address
  string state = 5;           // State (e.g., "in", "out")
  string state_detail = 6;    // Optional state detail
}

// UpdateTimeCardLogRequest updates an existing timecard log (dev only)
message UpdateTimeCardLogRequest {
  string datetime = 1;        // RFC3339 format timestamp (part of composite key)
  int32 id = 2;               // User ID (part of composite key)
  string card_id = 3;         // Card ID (FeliCa UID etc.)
  string machine_ip = 4;      // Machine IP address
  string state = 5;           // State (e.g., "in", "out")
  string state_detail = 6;    // Optional state detail
}

// DeleteTimeCardLogRequest deletes a timecard log (dev only)
message DeleteTimeCardLogRequest {
  string datetime = 1;        // RFC3339 format timestamp
  int32 id = 2;               // User ID
}

// DeleteTimeCardLogResponse confirms deletion
message DeleteTimeCardLogResponse {
  bool success = 1;
  string message = 2;
}
